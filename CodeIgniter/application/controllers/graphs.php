<?php	include '/../libraries/Highchart.php';	class Graphs extends CI_Controller {		private $highchart;
		function __construct(){
			parent::__construct();        	$this->load->model('webapps/itms/ittrans_dtl_model');
		}				function sample($job_no = ""){			$purc_price = $this->ittrans_dtl_model->getPrice('xex-000000027');						$repair_price = $this->ittrans_dtl_model->getRepPrice('xex-000000027');						echo ($job_no == "");			var_dump($purc_price);			var_dump($repair_price);		}		function index($job_no = "", $fa = ""){			if (substr($job_no,0,1) == "X"){				$fa = $job_no;							$job_no = "";			}							$record = $this->ittrans_dtl_model->getFA($job_no);			foreach ($record as $key => $value) {					$date1 = new DateTime($value['REF_MRRDATE']);				$date2 = new DateTime();				$diff = $date1->diff($date2);				$record[$key]['dateDiff'] = ((($diff->format('%y') * 12) + $diff->format('%m')) * $value['CRIT_LEVEL']);							}			$cat = array();			foreach ($record as $key => $value) {				$cat[$key] = $value['FIX_ASSET'];								// $cat[$key] = ($job_no == "" ? str_replace("-","",str_replace("0", "", $value['FIX_ASSET'])) : $value['FIX_ASSET']);							}			$data['job_no'] = array();			foreach ($this->ittrans_dtl_model->getJob() as $key => $value) {				if (!in_array($value['trans_job'], $data['job_no']))					$data['job_no'][$key] = (trim($value['trans_job']) == "" ? "CENTRAL" : $value['trans_job']);			}				sort($data['job_no']);			$data['job_no'] = array_merge(array(0 => "All"), $data['job_no']);			$data['curr_job'] = $job_no;			$series = array(						array(					        'name' => 'Maximum Usage',					        'pointPlacement' => 'on',					        'color' => '#075905'					    ),					    array(					        'name' => 'Actual Total Usage',					        'pointPlacement' => 'on',					        'color' => '#AA1919'					    )					);			$seriesArr1 = array();			$seriesArr2 = array();			foreach ($record as $key => $value) {				$seriesArr1[$key] = $value['dateDiff'];								$seriesArr2[$key] = intval($value['EQUIP_USAGE']);			}			$series[0]['data'] = $seriesArr1;						$series[1]['data'] = $seriesArr2;						// $this->load->library("Highchart");			$this->highchart = new Highchart();
			$this->highchart->includeExtraScripts();						$this->highchart->plotOptions->series->point->events->click = new HighchartJsExpr(			    "function() {			    	location.href = '/codeIgniter/index.php/graphs/index" . (($job_no == "") ? "" : ("/" . $job_no)) . "' + ('/' + this.category);			    }");
						$this->highchart->labels->style = array("word-wrap" => "normal");
			$this->highchart->chart->renderTo = 'container';
			$this->highchart->chart->polar = true;
			$this->highchart->chart->type = 'line';
			$this->highchart->title->text = 'Maximum Usage vs. Actual Total Usage';
			$this->highchart->pane->size = '93%';
			$this->highchart->pane->endAngle = 360;
			$this->highchart->xAxis->categories = $cat;
			$this->highchart->xAxis->tickmarkPlacement = 'on';
			$this->highchart->xAxis->lineWidth = 0;
			$this->highchart->yAxis->gridLineInterpolation = 'polygon';
			$this->highchart->yAxis->lineWidth = 0;
			$this->highchart->yAxis->min = 0;
			$this->highchart->tooltip->shared = true;
			$this->highchart->tooltip->pointFormat = '<span style="color:{series.color}">{series.name}: <b>{point.y:,.0f} copies</b><br/>';
			$this->highchart->legend->align = 'left';
			$this->highchart->legend->verticalAlign = 'top';
			$this->highchart->legend->y = 40;
			$this->highchart->legend->layout = 'vertical';			$this->highchart->legend->floating = true;
			$this->highchart->series = $series;
			$data['jsFiles'] = $this->highchart->printScripts();
			$data['chart1'] = $this->highchart->render("chart1");						$this->create_gauge($data,$fa);			// $this->view($data);		}		function create_gauge($data = array(),$fa = ""){			if ($fa != ""){				// $this->load->library("Highchart");				$this->highchart = new Highchart();				$this->highchart->includeExtraScripts();								$this->highchart->chart = array(				    'type' => 'gauge',				    'plotBackgroundColor' => null,				    'plotBackgroundImage' => null,				    'plotBorderWidth' => 0,				    'plotShadow' => false				);				$this->highchart->title->text = 'Total Repair Price vs. Purchase Price';								$this->highchart->title->style = array("font-size" => "13px","color" => "#274B6D");								$this->highchart->pane->startAngle = -150;				$this->highchart->pane->endAngle = 150;				$this->highchart->background = array(				    array(				        'backgroundColor' => array(				            'linearGradient' => array(				                'x1' => 0,				                'y1' => 0,				                'x2' => 0,				                'y2' => 1				            ),				            'stops' => array(				                array(0, '#FFF'),				                array(1, '#333')				            )				        ),				        'borderWidth' => 0,				        'outerRadius' => '109%'				    ),				    array(				        'backgroundColor' => array(				            'linearGradient' => array(				                'x1' => 0,				                'y1' => 0,				                'x2' => 0,				                'y2' => 1				            ),				            'stops' => array(				                array(0, '#333'),				                array(1, '#FFF')				            )				        ),				        'borderWidth' => 1,				        'outerRadius' => '107%'				    ),				    array(				        'backgroundColor' => '#DDD',				        'borderWidth' => 0,				        'outerRadius' => '105%',				        'innerRadius' => '103%'				    )				);				$repair_price = $this->ittrans_dtl_model->getRepPrice($fa);				$purc_price = $this->ittrans_dtl_model->getPrice($fa);				$data['dtl_job_no'] = $purc_price[0]['JOB_NO'];				$data['dtl_fix_asset'] = $fa;				$this->highchart->yAxis = array(				    'min' => 0,				    'max' => (intval($repair_price[0]['REPAIR_AMT']) > intval($purc_price[0]['UNIT_COST'])) ? $repair_price[0]['REPAIR_AMT'] : $purc_price[0]['UNIT_COST'],				    'minorTickInterval' => 'auto',				    'minorTickWidth' => 1,				    'minorTickLength' => 10,				    'minorTickPosition' => 'inside',				    'minorTickColor' => '#666',				    'tickPixelInterval' => 30,				    'tickWidth' => 2,				    'tickPosition' => 'inside',				    'tickLength' => 10,				    'tickColor' => '#666',				    'labels' => array(				        'step' => 2,				        'rotation' => 'auto'				    ),				    'title' => array(				        'text' => 'Total Repair Price (SR) <br />(' . $fa . ')',				        'style' => array("color" => "#4D759E","font-weight" => "bold", "font-size" => "9px")				    ),				    'plotBands' => array(				        array(				            'from' => 0,				            'to' => intval($purc_price[0]['UNIT_COST']) * .5,				            'color' => '#075905'				        ),				        array(				            'from' => intval($purc_price[0]['UNIT_COST']) * .5,				            'to' => intval($purc_price[0]['UNIT_COST']) * .75,				            'color' => '#f9f604'				        ),				        array(				            'from' => intval($purc_price[0]['UNIT_COST']) * .75,				            'to' => $purc_price[0]['UNIT_COST'],				            'color' => '#AA1919'				        )				    )				);				if (intval($repair_price[0]['REPAIR_AMT']) > intval($purc_price[0]['UNIT_COST']))					$this->highchart->yAxis->plotBands[3] = array(				            'from' => $purc_price[0]['UNIT_COST'],				            'to' => $repair_price[0]['REPAIR_AMT'],				            'color' => '#b75608'				        );				$this->highchart->series[] = array(				    'name' => 'Total Repair Price',				    'data' => array(intval($repair_price[0]['REPAIR_AMT'])),				    'tooltip' => array(				        'valueSuffix' => ' SR'					)				);				$this->highchart->tooltip->pointFormat = '<span style="color:#075905">{series.name}: <b>{point.y:,.0f} SR</b><br/><span style="color:#AA1919">Purchase Price: <b>' . number_format($purc_price[0]['UNIT_COST']) . ' SR</b>';				$data['chart2'] = $this->highchart->renderOptions();			}			// $this->create_column($data);			$this->view($data);			}		function create_column($data = array()){			$this->highchart = new Highchart();						$this->highchart->chart->renderTo = "container3";			$this->highchart->chart->type = "column";			$this->highchart->title->text = "Browser market share, April, 2011";			$this->highchart->subtitle->text = "Click the columns to view versions. Click again to view brands.";			$this->highchart->xAxis->categories = new HighchartJsExpr("categories");			$this->highchart->yAxis->title->text = "Total percent market share";			$this->highchart->plotOptions->column->cursor = "pointer";						$this->highchart->plotOptions->column->point->events->click = new HighchartJsExpr(			    "function() {			    var drilldown = this.drilldown;			    if (drilldown) { // drill down			      setChart(drilldown.name, drilldown.categories, drilldown.data, drilldown.color);			    } else { // restore			      setChart(name, categories, data);			    }}");						$this->highchart->plotOptions->column->dataLabels->enabled = 1;			$this->highchart->plotOptions->column->dataLabels->color = new HighchartJsExpr("colors[0]");			$this->highchart->plotOptions->column->dataLabels->style->fontWeight = "bold";						$this->highchart->plotOptions->column->dataLabels->formatter = new HighchartJsExpr("function() {			    return this.y +'%';}");						$this->highchart->tooltip->formatter = new HighchartJsExpr(			    "function() {			    var point = this.point,			        s = this.x +':<b>'+ this.y +'% market share</b><br/>';			    if (point.drilldown) {			      s += 'Click to view '+ point.category +' versions';			    } else {			      s += 'Click to return to browser brands';			    }			    return s;}");						$this->highchart->series[] = array(			    'name' => new HighchartJsExpr("name"),			    'data' => new HighchartJsExpr("data"),			    'color' => 'white'			);						$this->highchart->exporting->enabled = false;				$data['chart3'] = $this->highchart->render("chart");			$this->view($data);					}				function view($data = array()){			
			$this->load->view('graphs', $data);
		}
	}
?>